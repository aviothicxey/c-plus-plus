JS: Array Methods (pop, push, shift, unshift, splice) bookmark_border:



When you work with arrays, it is easy to remove elements and add new elements.

This is what popping and pushing is:

Popping items out of an array, or pushing items into an array.

The .pop() Method :-
The pop() method removes the last element from an array:

let friends = ["Abhi", "Sumit", "Pawan"];
friends.pop() // Removes the last element ("Pawan") from friends 
The pop() method returns the value that was "popped out":

let friends = ["Abhi", "Sumit", "Pawan"];
let x = friends.pop() //the value of x is "Pawan"
The .push() Method :-
The push() method adds a new element to an array (at the end):

let friends = ["Abhi", "Sumit", "Pawan"];
friends.push("Paras") // Add a new element ("Paras") to friends.
The push() method returns the new array length

 The .shift() Method :-
Shifting is equivalent to popping, working on the first element instead of the last.

The shift() method removes the first array element and "shifts" all other elements to a lower index.

let friends = ["Abhi", "Sumit", "Pawan" , "Paras" ];
friends.shift() // Remove the first element ("Abhi") from friends.
The shift() method returns the string that was "shifted out":

 The .unshift() Method :-
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

let friends = [ "Sumit", "Pawan" , "Paras" ];
friends.unshift("Abhi") // Add a new element ("Abhi") at beginning to friends.
 

The .splice() Method :-
The splice() method can be used to add new items to an array:

let friends = [ "Sumit", "Pawan" , "Paras" ];
friends.splice(2, 0, "Amit", "Amar"); // [ "Sumit", "Pawan" , "Amit", "Amar" , "Paras" ]
The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Amit", "Amar") define the new elements to be added.

The splice() method returns an array with the deleted items. You can use splice() to remove elements

var friends = [ "Sumit", "Pawan" , "Amit", "Amar" , "Paras" ]
friends.splice(0, 2); // ["Amit", "Amar" , "Paras"]
The first parameter (0) defines the position where new elements should be added (spliced in).

The second parameter (2) defines how many elements should be removed.

The rest of the parameters are omitted. No new elements will be added.






JS: Function Callbacks bookmark_border





When a function is passed to another function, it is called a callback function.Let’s look at more examples of passing functions as values and using function expressions.

We’ll write a function ask(question, yes, no) with three parameters:

question : Text of the question

yes : Function to run if the answer is “Yes”

no : Function to run if the answer is “No”

The function should ask the question and, depending on the user’s answer, call yes() or no():

function ask(question, yes, no) {
 if (confirm(question)) yes()
 else no();
}
 
function showOk() {
 alert( "You agreed." );
}
 
function showCancel() {
 alert( "You canceled the execution." );
}
 
// usage: functions showOk, showCancel are passed as arguments to ask
ask("Do you agree?", showOk, showCancel);
The arguments showOk and showCancel of ask are called callback functions or just callbacks.

The idea is that we pass a function and expect it to be “called back” later if necessary. In our case, showOk becomes the callback for “yes” answer, and showCancel for “no” answer.

We can use Function Expressions to write the same function much shorter:

function ask(question, yes, no) {
 if (confirm(question)) yes()
 else no();
}
 
ask(
 "Do you agree?",
 function() { alert("You agreed."); },
 function() { alert("You canceled the execution."); }
);
Here, functions are declared right inside the ask(...) call. They have no name, and so are called anonymous. Such functions are not accessible outside of ask (because they are not assigned to variables), but that’s just what we want here.




